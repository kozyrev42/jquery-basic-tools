//  Работа с библиотекой jQuery осуществляется с помощью универсальной функции $() 

// После доллара следует писать круглые скобки (это же функция), в которых указываются параметры (обычно один параметр),
//  примерно вот так: $(параметр).
// Чаще всего с помощью доллара $ получают группу HTML элементов по CSS селектору.

// в переменной получим html тег, с селектором class="xxx"
// var elems_class = $('.xxx').html();

// в переменной получим html тег, с селектором class="xxx"
// var elems_id = $('#xxx').html();

// К примеру, вот так мы получим все элементы с классом .xxx и поставим им красный цвет:
// $('.xxx').css('color', 'red');


// Почти все методы jQuery возвращают набор, к которому этот метод был применен,
//  что позволяет выстраивать цепочки методов любой длины.
// Давайте получим все элементы с классом .xxx, поставим им красный цвет, и сменим их текст на 'новый текст':
// обратился к селектору.установил цвет.установил новый текст
// !!! Длина цепочек не ограничена - вы можете применять подряд столько методов, сколько вам нужно.
// текст и цвет изменится у всех элементов на странице
// $('.xxx').css('color', 'green').html('новый_текст!');

// можно записать набор элементов в переменную, а потом изменить их свойства и текст
// названия $переменных, которые содержат в себе обернутый набор jQuery, принято начинать с доллара $
let $elems = $('.xxx');
// $elems.css('color', 'red').html('новый_текст!!!');

// обратимся к элементу по id и выведем алертом
// let $elem = $('#xxx');
// alert($elem.html());

// выведет только значение одного контейнера
// let $elems = $('.xxx');
// alert($elems.html());

// .css()- Первым параметром метод принимает имя CSS свойства, а вторым - его новое значение.
$elems.css('background-color', 'blue')

//  Если вы хотите задать несколько CSS свойств, то для этого можно передать параметром в метод .css() объект,
// ключами которого будут CSS свойства, а значениями объекта - значения CSS свойств
// меняется синтаксис написания свойств! font-size -> fontSize -> или 'font-size'
$elems.css({color: '#ffffff', 'font-size': '24px'});



// jQuery поддерживает все стандартные селекторы CSS и псевдоклассы и псевдоэлементы CSS.
// То есть :first и другие подобные селекторы jQuery работают так: находят все элементы по заданному селектору, а затем берут первый элемент среди найденных.
// С помощью :eq мы можем выбрать элемент с любым номером в наборе, к примеру, таким образом - :eq(3) - мы выберем третий найденный элемент.
// С помощью :even и :odd можно выбирать четные и нечетные элементы в наборе.
// Еще полезные селекторы jQuery:
// псевдокласс :header выбирает одновременно все заголовки от h1 до h6.
// Псевдокласс :contains выбирает элементы по наличию определенного текста в них.
// $('p:contains("текст")')

// Получите и покрасьте в красный цвет все заголовки с классом zzz.
// $(':headers.zzz').css('color', 'red');
// Получите и покрасьте в красный цвет все заголовки НЕ с классом zzz.
// $(':headers:not(.zzz)').css('color', 'red');

// метод .each(), позволяет применить какую-либо Функцию для всех элементов набора jQuery
// По сути .each() является циклом, в помощью которого можно перебрать все найденные элементы.
// ! Ссылка на тот элемент, по которому сейчас проходит цикл будет лежать в 'this'.
// лучше обернуть this в доллар jQuery таким образом - $(this) - в этом случае мы сможем применять к нему все методы и цепочки jQuery.

// получаем нужные нам элементы по селектору, затем с помощью .each(test) мы к каждому полученному элементу применяем функцию test
$('.xxx').each(test);
// Внутри функции 'this' будет по очереди указывать на тот элемент, к которому применяется функция test - сначала это будет первый элемент, потом второй, ну и так далее
function test() {
	alert($(this).html());
}

// можно использовать анонимную функцию
// $('.www').each(function() {
// 	alert($(this).html());
// });